{
  "arch_conf": [
    {
      "name": "Name",
      "value": "MIPS-32"
    },
    {
      "name": "Bits",
      "value": "32"
    },
    {
      "name": "Description",
      "value": "The MIPS processor was developed by Dr.John Hennessey and his graduate students at Stanford University in the early 1980s. It is currently one of the major processors in the embedded processor market."
    },
    {
      "name": "Data Format",
      "value": "big_endian"
    },
    {
      "name": "Memory Alignment",
      "value": "1"
    },
    {
      "name": "Main Function",
      "value": "main"
    },
    {
      "name": "Passing Convention",
      "value": "1"
    },
    {
      "name": "Sensitive Register Name",
      "value": "1"
    }
  ],
  "components": [
    {
      "name": "Control registers",
      "type": "ctrl_registers",
      "double_precision": false,
      "elements": [
        {
          "name": [
            "PC"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "program_counter"
          ]
        },
        {
          "name": [
            "EPC"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "exception_program_counter"
          ]
        },
        {
          "name": [
            "CAUSE"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "event_cause"
          ]
        },
        {
          "name": [
            "BADVADDR"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "STATUS"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "status_register"
          ]
        },
        {
          "name": [
            "HI"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "LO"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FIR"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FCSR"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FCCR"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FEXR"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "name": "Integer registers",
      "type": "int_registers",
      "double_precision": false,
      "elements": [
        {
          "name": [
            "0",
            "zero"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read"
          ]
        },
        {
          "name": [
            "1",
            "at"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "2",
            "v0"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "3",
            "v1"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "4",
            "a0"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "5",
            "a1"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "6",
            "a2"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "7",
            "a3"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "8",
            "t0"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "9",
            "t1"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "10",
            "t2"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "11",
            "t3"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "12",
            "t4"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "13",
            "t5"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "14",
            "t6"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "15",
            "t7"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "16",
            "s0"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "saved"
          ]
        },
        {
          "name": [
            "17",
            "s1"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "saved"
          ]
        },
        {
          "name": [
            "18",
            "s2"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "saved"
          ]
        },
        {
          "name": [
            "19",
            "s3"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "saved"
          ]
        },
        {
          "name": [
            "20",
            "s4"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "saved"
          ]
        },
        {
          "name": [
            "21",
            "s5"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "saved"
          ]
        },
        {
          "name": [
            "22",
            "s6"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "saved"
          ]
        },
        {
          "name": [
            "23",
            "s7"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "saved"
          ]
        },
        {
          "name": [
            "24",
            "t8"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "25",
            "t9"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "26",
            "k0"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "27",
            "k1"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "28",
            "gp"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "global_pointer"
          ]
        },
        {
          "name": [
            "29",
            "sp"
          ],
          "nbits": "32",
          "value": 268435452,
          "default_value": 268435452,
          "properties": [
            "read",
            "write",
            "stack_pointer"
          ]
        },
        {
          "name": [
            "30",
            "fp"
          ],
          "nbits": "32",
          "value": 0,
          "default_value": 0,
          "properties": [
            "read",
            "write",
            "frame_pointer"
          ]
        },
        {
          "name": [
            "31",
            "ra"
          ],
          "nbits": "32",
          "value": 4294967295,
          "default_value": 4294967295,
          "properties": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "name": "Simple floating point registers",
      "type": "fp_registers",
      "double_precision": false,
      "elements": [
        {
          "name": [
            "f0"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f1"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f2"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f3"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f4"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f5"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f6"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f7"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f8"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f9"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f10"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f11"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f12"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f13"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f14"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f15"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f16"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f17"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f18"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f19"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f20"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f21"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f22"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f23"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f24"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f25"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f26"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f27"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f28"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f29"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f30"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "f31"
          ],
          "nbits": "32",
          "value": 0.0,
          "default_value": 0.0,
          "properties": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "name": "Double floating point registers",
      "type": "fp_registers",
      "double_precision": true,
      "double_precision_type": "linked",
      "elements": [
        {
          "name": [
            "FP0"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f0",
            "f1"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP2"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f2",
            "f3"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP4"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f4",
            "f5"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP6"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f6",
            "f7"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP8"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f8",
            "f9"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP10"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f10",
            "f11"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP12"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f12",
            "f13"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP14"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f14",
            "f15"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP16"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f16",
            "f17"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP18"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f18",
            "f19"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP20"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f20",
            "f21"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP22"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f22",
            "f23"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP24"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f24",
            "f25"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP26"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f26",
            "f27"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP28"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f28",
            "f29"
          ],
          "properties": [
            "read",
            "write"
          ]
        },
        {
          "name": [
            "FP30"
          ],
          "nbits": "64",
          "value": 0.0,
          "simple_reg": [
            "f30",
            "f31"
          ],
          "properties": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "instructions": [
    {
      "name": "abs.d",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "abs.d,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "abs.d $fd $fs",
      "co": "010001",
      "cop": "00001000101",
      "help": "Absolute value of a real 64-bit number.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "abs.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000101"
        }
      ],
      "definition": "fd = Math.abs(fs);"
    },
    {
      "name": "abs.s",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "abs.s,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "abs.s $fd $fs",
      "co": "010001",
      "cop": "00000000101",
      "help": "Absolute value of a real 32-bit number.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "abs.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000101"
        }
      ],
      "definition": "fd = Math.abs(fs);"
    },
    {
      "name": "add",
      "type": "Arithmetic integer",
      "co": "000000",
      "cop": "100000",
      "help": "Sum with overflow",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F3 $F2 $F1",
      "signature": "add,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "add $reg3 $reg2 $reg1",
      "fields": [
        {
          "name": "add",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "reg3",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100000"
        }
      ],
      "definition": "var isover = capi_arithmetic_overflow(reg1, reg2, reg1+reg2);\n if (!isover)\n { reg3 = reg1 + reg2; }\n else\n { capi_raise('Integer Overflow'); }"
    },
    {
      "name": "add.d",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F4 $F3 $F2",
      "signature": "add.d,$DFP-Reg,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "add.d $fd $fs $ft",
      "co": "010001",
      "cop": "00001000000",
      "help": "Add the register fs and ft and store the result in fd (double)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "add.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "ft",
          "type": "DFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000000"
        }
      ],
      "definition": "fd = fs + ft;"
    },
    {
      "name": "add.s",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F4 $F3 $F2",
      "signature": "add.s,$SFP-Reg,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "add.s $fd $fs $ft",
      "co": "010001",
      "cop": "00000000000",
      "help": "Add the register fs and ft and store the result in fd (float)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "add.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000000"
        }
      ],
      "definition": "fd = fs + ft;"
    },
    {
      "name": "addi",
      "type": "Arithmetic integer",
      "co": "001000",
      "cop": "",
      "help": "Add an immediate number with overflow",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F2 $F1 F3",
      "signature": "addi,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "addi $reg2 $reg1 val",
      "fields": [
        {
          "name": "addi",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "var isover = capi_arithmetic_overflow(reg1, val, reg1+val);\n if (!isover)\n { reg2 = reg1 + val; }\n else\n { capi_raise('Integer Overflow'); }"
    },
    {
      "name": "addiu",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F2 $F1 F3",
      "signature": "addiu,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "addiu $reg2 $reg1 val",
      "co": "001001",
      "cop": "",
      "help": "Add an immediate number without overflow",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "addiu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "reg2 = reg1 + val;"
    },
    {
      "name": "addu",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F3 $F1 $F2",
      "signature": "addu,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "addu $reg3 $reg1 $reg2",
      "co": "000000",
      "cop": "100001",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "addu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "reg3",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100001"
        }
      ],
      "definition": "reg3 = reg1 + reg2;"
    },
    {
      "name": "and",
      "type": "Logic",
      "co": "000000",
      "cop": "100100",
      "help": "AND logical operation",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F3 $F2 $F1",
      "signature": "and,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "and $reg3 $reg2 $reg1",
      "fields": [
        {
          "name": "and",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "reg3",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100100"
        }
      ],
      "definition": "reg3 = reg1 & reg2;"
    },
    {
      "name": "andi",
      "type": "Logic",
      "co": "001100",
      "cop": "",
      "help": "AND logical operation with an immediate number",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F2 $F1 F3",
      "signature": "andi,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "andi $reg2 $reg1 val",
      "fields": [
        {
          "name": "andi",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "reg2 = reg1 & capi_int2uint(val);"
    },
    {
      "name": "bc",
      "type": "Unconditional bifurcation",
      "signature_definition": "F0 F1",
      "signature": "bc,offset_words",
      "signatureRaw": "bc off",
      "co": "110010",
      "cop": "",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "bc",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 25,
          "stopbit": 0
        }
      ],
      "definition": "PC = PC + ((off << 6) >> 4);"
    },
    {
      "name": "bc1eqz",
      "type": "Conditional bifurcation",
      "signature_definition": "F0 $F2 F3",
      "signature": "bc1eqz,$SFP-Reg,offset_words",
      "signatureRaw": "bc1eqz $ft off",
      "co": "010001",
      "cop": "01001",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "bc1eqz",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "01001"
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "if (ft == 0) { PC = PC + ((off << 16) >> 14) }"
    },
    {
      "name": "bc1f",
      "type": "Conditional bifurcation",
      "signature_definition": "F0 F2 F3",
      "signature": "bc1f,inm-unsigned,offset_words",
      "signatureRaw": "bc1f cc off",
      "co": "010001",
      "cop": "0100000",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "bc1f",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "01000"
        },
        {
          "name": "cc",
          "type": "inm-unsigned",
          "startbit": 20,
          "stopbit": 18
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 17,
          "stopbit": 16,
          "valueField": "00"
        }
      ],
      "definition": "if ((FCSR & (1 << ((cc == 0 ? 0 : cc+1) + 23))) == 0) {\n    PC=PC+((off << 16) >> 14)\n}"
    },
    {
      "name": "bc1nez",
      "type": "Conditional bifurcation",
      "signature_definition": "F0 $F2 F3",
      "signature": "bc1nez,$SFP-Reg,offset_words",
      "signatureRaw": "bc1nez $ft off",
      "co": "010001",
      "cop": "01101",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "bc1nez",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "01101"
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "if (ft != 0) { PC = PC + ((off << 16) >> 14) }"
    },
    {
      "name": "bc1t",
      "type": "Conditional bifurcation",
      "signature_definition": "F0 F2 F4",
      "signature": "bc1t,inm-unsigned,offset_words",
      "signatureRaw": "bc1t cc off",
      "co": "010001",
      "cop": "0100001",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "bc1t",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "01000"
        },
        {
          "name": "cc",
          "type": "inm-unsigned",
          "startbit": 20,
          "stopbit": 18
        },
        {
          "name": "ndtf",
          "type": "cop",
          "startbit": 17,
          "stopbit": 16,
          "valueField": "01"
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "if ((FCSR & (1 << ((cc == 0 ? 0 : cc+1) + 23))) != 0) {\n    PC=PC+((off << 16) >> 14)\n}"
    },
    {
      "name": "beq",
      "type": "Conditional bifurcation",
      "co": "000100",
      "cop": "",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 $F2 F3",
      "signature": "beq,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "beq $reg1 $reg2 off",
      "fields": [
        {
          "name": "beq",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "if (reg1 == reg2) { PC = PC + ((off << 16) >> 14) }"
    },
    {
      "name": "bgez",
      "type": "Conditional bifurcation",
      "signature_definition": "F0 $F1 F3",
      "signature": "bgez,$INT-Reg,offset_words",
      "signatureRaw": "bgez $rs off",
      "co": "000001",
      "cop": "00001",
      "help": "Conditional branch if the Rsrc register is greater than or equal to 0.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "bgez",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 20,
          "stopbit": 16,
          "valueField": "00001"
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "if (capi_uint2int(rs) >= 0) { PC = PC + ((off << 16) >> 14) }"
    },
    {
      "name": "bgezal",
      "type": "Function call",
      "signature_definition": "F0 $F1 F3",
      "signature": "bgezal,$INT-Reg,offset_words",
      "signatureRaw": "bgezal $rs off",
      "co": "000001",
      "cop": "10001",
      "help": "Conditional branch if the Rsrc register is greater than or equal to 0. Save the current address in the $ra register ($31)",
      "properties": [
        "enter_subrutine"
      ],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "bgezal",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 20,
          "stopbit": 16,
          "valueField": "10001"
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "ra = PC;\n if (capi_uint2int(rs) >= 0)\n { PC = PC + ((off << 16) >> 14)\n capi_callconv_begin(rs); capi_drawstack_begin(rs); }"
    },
    {
      "name": "bgtz",
      "type": "Conditional bifurcation",
      "signature_definition": "F0 $F1 F2",
      "signature": "bgtz,$INT-Reg,offset_words",
      "signatureRaw": "bgtz $rs off",
      "co": "000111",
      "cop": "",
      "help": "Conditional branch if Rsrc is greater than 0.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "bgtz",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "if (capi_uint2int(rs) > 0)\n { PC = PC + ((off << 16) >> 14) }"
    },
    {
      "name": "blez",
      "type": "Conditional bifurcation",
      "signature_definition": "F0 $F1 F2",
      "signature": "blez,$INT-Reg,offset_words",
      "signatureRaw": "blez $rs off",
      "co": "000110",
      "cop": null,
      "help": "Conditional branch if Rsrc is less than or equal to 0.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "blez",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "if (capi_uint2int(rs) <= 0)\n { PC = PC + ((off << 16) >> 14) }"
    },
    {
      "name": "bltz",
      "type": "Conditional bifurcation",
      "signature_definition": "F0 $F1 F3",
      "signature": "bltz,$INT-Reg,offset_words",
      "signatureRaw": "bltz $rs off",
      "co": "000001",
      "cop": "00000",
      "help": "Conditional branch if Rsrc is less than 0.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "bltz",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 20,
          "stopbit": 16,
          "valueField": "00000"
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "if (capi_uint2int(rs) < 0)\n { PC = PC + ((off << 16) >> 14) }"
    },
    {
      "name": "bne",
      "type": "Conditional bifurcation",
      "co": "000101",
      "cop": null,
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 $F2 F3",
      "signature": "bne,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "bne $reg1 $reg2 off",
      "fields": [
        {
          "name": "bne",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "offset_words",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "if (reg1 != reg2)\n { PC = PC + ((off << 16) >> 14) }"
    },
    {
      "name": "c.eq.d",
      "type": "Logic",
      "signature_definition": "F0 F4 $F3 $F2",
      "signature": "c.eq.d,inm-unsigned,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "c.eq.d cc $fs $ft",
      "co": "010001",
      "cop": "000010010",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "c.eq.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "ft",
          "type": "DFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cc",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 8
        },
        {
          "name": "cond",
          "type": "cop",
          "startbit": 3,
          "stopbit": 0,
          "valueField": "0010"
        }
      ],
      "definition": "var off = capi_int2uint(cc) ;\nif (off != 0) {\n    off = off +1;\n}\nvar condition = (ft == fs) ? 1 : 0;\nFCSR = (FCSR & ((24 + off) >= 32 ? 0 : (-1 << (24 + off)))) | (condition << (23+off)) | (FCSR & (-1 >>> (9 - off))); FCCR = condition"
    },
    {
      "name": "c.eq.s",
      "type": "Logic",
      "signature_definition": "F0 F4 $F3 $F2",
      "signature": "c.eq.s,inm-unsigned,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "c.eq.s cc $fs $ft",
      "co": "010001",
      "cop": "000000010",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "c.eq.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cc",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 8
        },
        {
          "name": "cond",
          "type": "cop",
          "startbit": 3,
          "stopbit": 0,
          "valueField": "0010"
        }
      ],
      "definition": "var off = capi_int2uint(cc);\nif (off != 0) {\n    off = off +1;\n}\nvar condition = (ft == fs) ? 1 : 0;\nFCSR = (FCSR & ((24 + off) >= 32 ? 0 : (-1 << (24 + off)))) | (condition << (23+off)) | (FCSR & (-1 >>> (9 - off))); FCCR = condition"
    },
    {
      "name": "c.ole.d",
      "type": "Logic",
      "signature_definition": "F0 F4 $F3 $F2",
      "signature": "c.ole.d,inm-unsigned,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "c.ole.d cc $fs $ft",
      "co": "010001",
      "cop": "000010110",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "c.ole.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "ft",
          "type": "DFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cc",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 8
        },
        {
          "name": "cond",
          "type": "cop",
          "startbit": 3,
          "stopbit": 0,
          "valueField": "0110"
        }
      ],
      "definition": "var off = capi_int2uint(cc) ;\nif (off != 0) {\n    off = off +1;\n}\nvar condition = (fs <= ft) ? 1 : 0;\nFCSR = (FCSR & ((24 + off) >= 32 ? 0 : (-1 << (24 + off)))) | (condition << (23+off)) | (FCSR & (-1 >>> (9 - off))); FCCR = condition"
    },
    {
      "name": "c.ole.s",
      "type": "Logic",
      "signature_definition": "F0 F4 $F3 $F2",
      "signature": "c.ole.s,inm-unsigned,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "c.ole.s cc $fs $ft",
      "co": "010001",
      "cop": "000000110",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "c.ole.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cc",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 8
        },
        {
          "name": "cond",
          "type": "cop",
          "startbit": 3,
          "stopbit": 0,
          "valueField": "0110"
        }
      ],
      "definition": "var off = capi_int2uint(cc) ;\nif (off != 0) {\n    off = off +1;\n}\nvar condition = (fs <= ft) ? 1 : 0;\nFCSR = (FCSR & ((24 + off) >= 32 ? 0 : (-1 << (24 + off)))) | (condition << (23+off)) | (FCSR & (-1 >>> (9 - off))); FCCR = condition"
    },
    {
      "name": "c.olt.d",
      "type": "Logic",
      "signature_definition": "F0 F4 $F3 $F2",
      "signature": "c.olt.d,inm-unsigned,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "c.olt.d cc $fs $ft",
      "co": "010001",
      "cop": "000010100",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "c.olt.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "ft",
          "type": "DFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cc",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 8
        },
        {
          "name": "cond",
          "type": "cop",
          "startbit": 3,
          "stopbit": 0,
          "valueField": "0100"
        }
      ],
      "definition": "var off = capi_int2uint(cc) ;\nif (off != 0) {\n    off = off +1;\n}\nvar condition = (fs < ft) ? 1 : 0;\nFCSR = (FCSR & ((24 + off) >= 32 ? 0 : (-1 << (24 + off)))) | (condition << (23+off)) | (FCSR & (-1 >>> (9 - off))); FCCR = condition"
    },
    {
      "name": "c.olt.s",
      "type": "Logic",
      "signature_definition": "F0 F4 $F3 $F2",
      "signature": "c.olt.s,inm-unsigned,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "c.olt.s cc $fs $ft",
      "co": "010001",
      "cop": "000000100",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "c.olt.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cc",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 8
        },
        {
          "name": "cond",
          "type": "cop",
          "startbit": 3,
          "stopbit": 0,
          "valueField": "0100"
        }
      ],
      "definition": "var off = capi_int2uint(cc) ;\nif (off != 0) {\n    off = off +1;\n}\nvar condition = (fs < ft) ? 1 : 0;\nFCSR = (FCSR & ((24 + off) >= 32 ? 0 : (-1 << (24 + off)))) | (condition << (23+off)) | (FCSR & (-1 >>> (9 - off))); FCCR = condition"
    },
    {
      "name": "cvt.d.s",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "cvt.d.s,$DFP-Reg,$SFP-Reg",
      "signatureRaw": "cvt.d.s $fd $fs",
      "co": "010001",
      "cop": "00000100001",
      "help": "Turn a float into a double, the result is saved in fd",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "cvt.d.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100001"
        }
      ],
      "definition": "fd = fs;"
    },
    {
      "name": "cvt.d.w",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "cvt.d.w,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "cvt.d.w $fd $fs",
      "co": "010001",
      "cop": "00001100001",
      "help": "Convert an integer to a double, the result is saved in fd",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "cvt.d.w",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100001"
        }
      ],
      "definition": "fd = fs;"
    },
    {
      "name": "cvt.s.d",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F2 $F3",
      "signature": "cvt.s.d,$SFP-Reg,$DFP-Reg",
      "signatureRaw": "cvt.s.d $fs $fd",
      "co": "010001",
      "cop": "00001100000",
      "help": "Turn a double into a float, the result is saved in fd",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "cvt.s.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100000"
        }
      ],
      "definition": "fd = fs;"
    },
    {
      "name": "cvt.s.w",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "cvt.s.w,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "cvt.s.w $fd $fs",
      "co": "010001",
      "cop": "00010100000",
      "help": "Convert an integer into a float, the result is saved in fd",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "cvt.s.w",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00010"
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100000"
        }
      ],
      "definition": "fd = parseFloat(float2int_v2(fs));"
    },
    {
      "name": "cvt.w.d",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "cvt.w.d,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "cvt.w.d $fd $fs",
      "co": "010001",
      "cop": "00001100100",
      "help": "Convert a double into an integer, the result is saved in Rdest",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "cvt.w.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100100"
        }
      ],
      "definition": "fd = parseInt(fs);"
    },
    {
      "name": "cvt.w.s",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "cvt.w.s,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "cvt.w.s $fd $fs",
      "co": "010001",
      "cop": "00000100100",
      "help": "Convert a float into an integer, the result is saved in Rdest",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "cvt.w.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100100"
        }
      ],
      "definition": "fd = parseInt(fs);"
    },
    {
      "name": "div",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F3 $F1 $F2",
      "signature": "div,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "div $rd $rs $rt",
      "co": "000000",
      "cop": "00010011010",
      "help": "Divide with overflow",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "div",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop1",
          "type": "cop",
          "startbit": 10,
          "stopbit": 6,
          "valueField": "00010"
        },
        {
          "name": "cop2",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "011010"
        }
      ],
      "definition": "if (rt != 0)\n { var cociente = (capi_uint2int(rs) / capi_uint2int(rt));\n if (cociente < 0) { rd = Math.ceil(cociente); } else { rd = Math.floor(cociente); }\n }\n else\n { capi_raise('Division by zero not allowed'); }"
    },
    {
      "name": "div",
      "type": "Arithmetic integer",
      "co": "000000",
      "cop": "011010",
      "help": "Divide with overflow. Leave the quotient in the register lo and the rest in the register hi",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 $F2",
      "signature": "div,$INT-Reg,$INT-Reg",
      "signatureRaw": "div $rs $rt",
      "fields": [
        {
          "name": "div",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "011010"
        }
      ],
      "definition": "HI = capi_uint2int(rs) % capi_uint2int(rt);\nvar cociente = (capi_uint2int(rs) / capi_uint2int(rt));\nif (cociente < 0) {\n    LO = Math.ceil(cociente);\n} else {\n    LO = Math.floor(cociente);\n}"
    },
    {
      "name": "div.d",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F4 $F3 $F2",
      "signature": "div.d,$DFP-Reg,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "div.d $fd $fs $ft",
      "co": "010001",
      "cop": "00001000011",
      "help": "Divide fs by ft and leave the result in fd (double)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "div.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26,
          "valueField": "010001"
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "ft",
          "type": "DFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000011"
        }
      ],
      "definition": "if (ft != 0)\n { fd = fs / ft; }\n else { capi_raise('Division by zero not allowed'); }"
    },
    {
      "name": "div.s",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F4 $F3 $F2",
      "signature": "div.s,$SFP-Reg,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "div.s $fd $fs $ft",
      "co": "010001",
      "cop": "00000000011",
      "help": "Divide fs by ft and leave the result in fd (float)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "div.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26,
          "valueField": "010001"
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000011"
        }
      ],
      "definition": "if (ft != 0)\n { fd = fs / ft; }\n else { capi_raise('Division by zero not allowed'); }"
    },
    {
      "name": "divu",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F3 $F1 $F2",
      "signature": "divu,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "divu $rd $rs $rt",
      "co": "000000",
      "cop": "00010011011",
      "help": "Divide without overflow",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "divu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 10,
          "stopbit": 6,
          "valueField": "00010"
        },
        {
          "name": "sop33",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "011011"
        }
      ],
      "definition": "if (rt != 0)\n { rd = Math.floor(capi_int2uint(rs) / capi_int2uint(rt)); }\n else { capi_raise('Division by zero not allowed'); }"
    },
    {
      "name": "divu",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F1 $F2",
      "signature": "divu,$INT-Reg,$INT-Reg",
      "signatureRaw": "divu $rs $rt",
      "co": "000000",
      "cop": "011011",
      "help": "Divide without overflow. Leave quotient in the register lo and the rest in the register hi",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "divu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "011011"
        }
      ],
      "definition": "if (rt != 0)\n { LO = Math.floor(capi_int2uint(rs) / capi_int2uint(rt));\nHI = capi_int2uint(rs) % capi_int2uint(rt); }\n else { capi_raise('Division by zero not allowed'); }"
    },
    {
      "name": "j",
      "type": "Unconditional bifurcation",
      "signature_definition": "F0 F1",
      "signature": "j,inm-signed",
      "signatureRaw": "j addr",
      "co": "000010",
      "cop": "",
      "help": "Unconditional jump.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "j",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "addr",
          "type": "inm-signed",
          "startbit": 25,
          "stopbit": 0
        }
      ],
      "definition": "PC = addr;"
    },
    {
      "name": "jal",
      "type": "Function call",
      "signature_definition": "F0 F1",
      "signature": "jal,inm-signed",
      "signatureRaw": "jal addr",
      "co": "000011",
      "cop": "",
      "help": "Unconditional jump, stores the current address at $ ra ($31).",
      "properties": [
        "enter_subrutine"
      ],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "jal",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "addr",
          "type": "inm-signed",
          "startbit": 25,
          "stopbit": 0
        }
      ],
      "definition": "ra = PC;\n PC = addr;\n capi_callconv_begin(addr); capi_drawstack_begin(addr);"
    },
    {
      "name": "jalr",
      "type": "Function call",
      "signature_definition": "F0 $F2 $F1",
      "signature": "jalr,$INT-Reg,$INT-Reg",
      "signatureRaw": "jalr $rd $rs",
      "co": "000000",
      "cop": "001001",
      "help": "Unconditional jump, stores the current address in Rsrc1.",
      "properties": [
        "enter_subrutine"
      ],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "jalr",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "001001"
        }
      ],
      "definition": "rd = PC;\n PC = rs;\n capi_callconv_begin(rs); capi_drawstack_begin(rs);"
    },
    {
      "name": "jr",
      "type": "Unconditional bifurcation",
      "signature_definition": "F0 $F1",
      "signature": "jr,$INT-Reg",
      "signatureRaw": "jr $rs",
      "co": "000000",
      "cop": "001000",
      "help": "Unconditional jump.",
      "properties": [
        "exit_subrutine"
      ],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "jr",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "001000"
        }
      ],
      "definition": "PC = rs;\n capi_callconv_end(); capi_drawstack_end();"
    },
    {
      "name": "lb",
      "type": "Memory access",
      "co": "100000",
      "cop": "",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 F2 ($F3)",
      "signature": "lb,$INT-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "lb $reg1 val ($reg2)",
      "fields": [
        {
          "name": "lb",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        }
      ],
      "definition": "reg1 = capi_mem_read(reg2+val, 'b', reg1_name);"
    },
    {
      "name": "lbu",
      "type": "Memory access",
      "signature_definition": "F0 $F2 F3 ($F1)",
      "signature": "lbu,$INT-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "lbu $rt off ($base)",
      "co": "100100",
      "cop": "",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "lbu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "base",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "rt = capi_mem_read(base+off, 'bu', rt_name);"
    },
    {
      "name": "ldc1",
      "type": "Memory access",
      "signature_definition": "F0 $F2 F3 ($F1)",
      "signature": "ldc1,$DFP-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "ldc1 $ft off ($base)",
      "co": "110101",
      "cop": "",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "ldc1",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "base",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "ft",
          "type": "DFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "var isnotalign = capi_bad_align(base+off, 'd');\n if (isnotalign) {  capi_raise('The memory must be align'); }\n var val1 = capi_mem_read(base+off, 'w');\n var val2 = capi_mem_read(base+off+4, 'w', ft_name);\n var buf = new ArrayBuffer(8);\n var arr = (new Uint32Array(buf));\narr[1] = val1;\n arr[0] = val2;\n ft = (new Float64Array(buf))[0];"
    },
    {
      "name": "lh",
      "type": "Memory access",
      "co": "100001",
      "cop": "",
      "help": "Load 16 bits of the specified address, sign is extended",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 F2 ($F3)",
      "signature": "lh,$INT-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "lh $reg1 val ($reg2)",
      "fields": [
        {
          "name": "lh",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        }
      ],
      "definition": "reg1 = capi_mem_read(reg2+val, 'h', reg1_name);"
    },
    {
      "name": "lhu",
      "type": "Memory access",
      "signature_definition": "F0 $F2 F3 ($F1)",
      "signature": "lhu,$INT-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "lhu $rt off ($base)",
      "co": "100101",
      "cop": "",
      "help": "Load 16 bits of the specified address, no sign is extended",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "lhu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "base",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "rt = capi_mem_read(base+off, 'hu', rt_name);"
    },
    {
      "name": "lui",
      "type": "Other",
      "co": "001111",
      "cop": null,
      "help": "Load the 16 bits of the lower part of the immediate value in the upper part of the register. The bits of the lower part are set to 0",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 F2",
      "signature": "lui,$INT-Reg,inm-signed",
      "signatureRaw": "lui $reg1 val",
      "fields": [
        {
          "name": "lui",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "reg1 = val << 16;"
    },
    {
      "name": "lw",
      "type": "Memory access",
      "co": "100011",
      "cop": null,
      "help": "Load a word from the specified address",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 F2 ($F3)",
      "signature": "lw,$INT-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "lw $reg1 val ($reg2)",
      "fields": [
        {
          "name": "lw",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        }
      ],
      "definition": "reg1 = capi_mem_read(val+reg2, 'w', reg1_name);"
    },
    {
      "name": "lwc1",
      "type": "Memory access",
      "signature_definition": "F0 $F2 F3 ($F1)",
      "signature": "lwc1,$SFP-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "lwc1 $ft off ($base)",
      "co": "110001",
      "cop": "",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "lwc1",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "base",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "ft = capi_mem_read(base+off, 'w', ft_name);\n ft = capi_uint2float32(ft);"
    },
    {
      "name": "mfc1",
      "type": "Transfer between registers",
      "signature_definition": "F0 $F2 $F3",
      "signature": "mfc1,$INT-Reg,$SFP-Reg",
      "signatureRaw": "mfc1 $rt $fs",
      "co": "010001",
      "cop": "11111",
      "help": "Moves the contents of the CPsrc register of the floating-point coprocessor to the Rdest CPU register.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mfc1",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "11111"
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        }
      ],
      "definition": "rt = capi_float322uint(fs);"
    },
    {
      "name": "mfhi",
      "type": "Transfer between registers",
      "signature_definition": "F0 $F1",
      "signature": "mfhi,$INT-Reg",
      "signatureRaw": "mfhi $rd",
      "co": "000000",
      "cop": "010000",
      "help": "Move the contents of the HI register to the Rdest register.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mfhi",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "010000"
        }
      ],
      "definition": "rd = HI;"
    },
    {
      "name": "mflo",
      "type": "Transfer between registers",
      "signature_definition": "F0 $F1",
      "signature": "mflo,$INT-Reg",
      "signatureRaw": "mflo $rd",
      "co": "000000",
      "cop": "010010",
      "help": "Move the contents of the LO register to the Rdest register.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mflo",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "010010"
        }
      ],
      "definition": "rd = LO;"
    },
    {
      "name": "mod",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F3 $F1 $F2",
      "signature": "mod,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "mod $rd $rs $rt",
      "co": "000000",
      "cop": "00011011010",
      "help": "Division module with overflow",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mod",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 10,
          "stopbit": 0,
          "valueField": "00011011010"
        }
      ],
      "definition": "rd = capi_uint2int(rs) % capi_uint2int(rt);"
    },
    {
      "name": "modu",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F1 $F2",
      "signature": "modu,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "modu $rd $rs $rt",
      "co": "000000",
      "cop": "00011011011",
      "help": "Division module without overflow",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "modu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 10,
          "stopbit": 0,
          "valueField": "00011011011"
        }
      ],
      "definition": "rd = capi_int2uint(rs) % capi_int2uint(rt);"
    },
    {
      "name": "mov.d",
      "type": "Transfer between registers",
      "signature_definition": "F0 $F3 $F2",
      "signature": "mov.d,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "mov.d $fd $fs",
      "co": "010001",
      "cop": "00001000110",
      "help": "Move the contents of the fs record to the fd record. (double)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mov.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000110"
        }
      ],
      "definition": "fd = fs;"
    },
    {
      "name": "mov.s",
      "type": "Transfer between registers",
      "signature_definition": "F0 $F3 $F2",
      "signature": "mov.s,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "mov.s $fd $fs",
      "co": "010001",
      "cop": "00000000110",
      "help": "Move the contents of the fs record to the fd record. (float)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mov.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000110"
        }
      ],
      "definition": "fd = fs;"
    },
    {
      "name": "mtc1",
      "type": "Transfer between registers",
      "signature_definition": "F0 $F2 $F3",
      "signature": "mtc1,$INT-Reg,$SFP-Reg",
      "signatureRaw": "mtc1 $rt $fs",
      "co": "010001",
      "cop": "00100",
      "help": "Move the contents of the Rsrc register of the CPU to the CPdest register of the floating-point coprocessor.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mtc1",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00100"
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        }
      ],
      "definition": "fs = capi_uint2float32(rt);"
    },
    {
      "name": "mthi",
      "type": "Transfer between registers",
      "signature_definition": "F0 $F1",
      "signature": "mthi,$INT-Reg",
      "signatureRaw": "mthi $rs",
      "co": "000000",
      "cop": "010001",
      "help": "Move the contents of the Rsrc register to the HI register.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mthi",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "010001"
        }
      ],
      "definition": "HI = rs;"
    },
    {
      "name": "mtlo",
      "type": "Transfer between registers",
      "signature_definition": "F0 $F1",
      "signature": "mtlo,$INT-Reg",
      "signatureRaw": "mtlo $rs",
      "co": "000000",
      "cop": "010011",
      "help": "Move the contents of the Rsrc register to the LO register.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mtlo",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "010011"
        }
      ],
      "definition": "LO = rs;"
    },
    {
      "name": "mul",
      "type": "Arithmetic integer",
      "co": "011100",
      "cop": "000010",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 $F2 $F3",
      "signature": "mul,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "mul $reg1 $reg2 $reg3",
      "fields": [
        {
          "name": "mul",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "reg3",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000010"
        }
      ],
      "definition": "reg1 = reg2 * reg3;"
    },
    {
      "name": "mul.d",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F4 $F3 $F2",
      "signature": "mul.d,$DFP-Reg,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "mul.d $fd $fs $ft",
      "co": "010001",
      "cop": "00001000010",
      "help": "Multiply the register fs and ft and leave your result in fd. (double)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mul.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "ft",
          "type": "DFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000010"
        }
      ],
      "definition": "fd = fs * ft;"
    },
    {
      "name": "mul.s",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F4 $F3 $F2",
      "signature": "mul.s,$SFP-Reg,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "mul.s $fd $fs $ft",
      "co": "010001",
      "cop": "00000000010",
      "help": "Multiply the register fs and ft and leave your result in fd. (float)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mul.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000010"
        }
      ],
      "definition": "fd = fs * ft;"
    },
    {
      "name": "mult",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F2 $F1",
      "signature": "mult,$INT-Reg,$INT-Reg",
      "signatureRaw": "mult $rt $rs",
      "co": "000000",
      "cop": "011000",
      "help": "Multiply, the low part of the result is left in the lo register and the high part in the hi register",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "mult",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "011000"
        }
      ],
      "definition": "var result = capi_uint2int(rs) * capi_uint2int(rt);\n HI=Math.floor(result / Math.pow (2, 32));\n LO=result % Math.pow(2, 32);"
    },
    {
      "name": "multu",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F2 $F1",
      "signature": "multu,$INT-Reg,$INT-Reg",
      "signatureRaw": "multu $rt $rs",
      "co": "000000",
      "cop": "011001",
      "help": "Multiply without overflow, the low part of the result is left in the lo register and the high part in the hi register",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "multu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "011001"
        }
      ],
      "definition": "var result = capi_int2uint(rs) * capi_int2uint(rt);\n HI = Math.floor(result / Math.pow(2, 32));\n HI = HI >>> 0;\n LO = result % Math.pow(2, 32);\n LO = LO >>> 0;"
    },
    {
      "name": "nop",
      "type": "Logic",
      "co": "000000",
      "cop": "000000",
      "help": "It does not perform any operation",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0",
      "signature": "nop",
      "signatureRaw": "nop",
      "fields": [
        {
          "name": "nop",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000000"
        }
      ],
      "definition": ""
    },
    {
      "name": "nor",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F3 $F1 $F2",
      "signature": "nor,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "nor $rd $rs $rt",
      "co": "000000",
      "cop": "101111",
      "help": "NOR Logic Operation",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "nor",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "101111"
        }
      ],
      "definition": "rd = (~ (rs | rt));"
    },
    {
      "name": "or",
      "type": "Logic",
      "co": "000000",
      "cop": "100101",
      "help": "OR Logic Operation",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 $F2 $F3",
      "signature": "or,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "or $reg1 $reg2 $reg3",
      "fields": [
        {
          "name": "or",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "reg3",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100101"
        }
      ],
      "definition": "reg1 = reg2 | reg3;"
    },
    {
      "name": "ori",
      "type": "Logic",
      "co": "001101",
      "cop": null,
      "help": "OR Logic Operation with immediate",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 $F2 F3",
      "signature": "ori,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "ori $reg1 $reg2 val",
      "fields": [
        {
          "name": "ori",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "reg1 = reg2 | val;"
    },
    {
      "name": "rotr",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F3 $F2 F4",
      "signature": "rotr,$INT-Reg,$INT-Reg,inm-unsigned",
      "signatureRaw": "rotr $rd $rt sa",
      "co": "000000",
      "cop": "1000010",
      "help": "Right rotation of inm bits",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "rotr",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "r",
          "type": "cop",
          "startbit": 21,
          "stopbit": 21,
          "valueField": "1"
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "sa",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000010"
        }
      ],
      "definition": "rd = capi_int2uint((rt >>> sa) | (rt << (32 - sa)));"
    },
    {
      "name": "rsqrt.d",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "rsqrt.d,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "rsqrt.d $fd $fs",
      "co": "010001",
      "cop": "00001010110",
      "help": "Reciprocal Square Root fd = 1.0/sqrt.s(fs) (double)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "rsqrt.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "010110"
        }
      ],
      "definition": "if (fs >= 0)\n { fd = 1.0/Math.sqrt(fs); }\n else { capi_raise('Square root of a negative number is not allowed.'); }"
    },
    {
      "name": "rsqrt.s",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "rsqrt.s,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "rsqrt.s $fd $fs",
      "co": "010001",
      "cop": "00000010110",
      "help": "Reciprocal Square Root fd = 1.0/sqrt.s(fs) (float)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "rsqrt.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "010110"
        }
      ],
      "definition": "if (fs >= 0)\n { fd = 1.0/Math.sqrt(fs); }\n else { capi_raise('Square root of a negative number is not allowed.'); }"
    },
    {
      "name": "sb",
      "type": "Memory access",
      "signature_definition": "F0 $F2 F3 ($F1)",
      "signature": "sb,$INT-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "sb $rt off ($base)",
      "co": "101000",
      "cop": "",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sb",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "base",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "capi_mem_write(base+off, rt, 'b', rt_name);"
    },
    {
      "name": "sdc1",
      "type": "Memory access",
      "signature_definition": "F0 $F2 F3 ($F1)",
      "signature": "sdc1,$DFP-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "sdc1 $ft off ($base)",
      "co": "111101",
      "cop": "",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sdc1",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "base",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "ft",
          "type": "DFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "capi_mem_write(base+off, capi_split_double(ft, 0), 'w', ft_name);\n capi_mem_write(base+off+4, capi_split_double(ft, 1), 'w');"
    },
    {
      "name": "sh",
      "type": "Memory access",
      "signature_definition": "F0 $F2 F3 ($F1)",
      "signature": "sh,$INT-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "sh $rt off ($base)",
      "co": "101001",
      "cop": "",
      "help": "Stores the low half word (16 bits) of a register in the indicated memory address.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sh",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "base",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "capi_mem_write(base+off, rt, 'h', rt_name);"
    },
    {
      "name": "sll",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F2 $F1 F3",
      "signature": "sll,$INT-Reg,$INT-Reg,inm-unsigned",
      "signatureRaw": "sll $rd $rt sa",
      "co": "000000",
      "cop": "111111",
      "help": "Logical bit shift to the left",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sll",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "sa",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "111111"
        }
      ],
      "definition": "rd = capi_int2uint(rt << sa);"
    },
    {
      "name": "slt",
      "type": "Logic",
      "signature_definition": "F0 $F3 $F1 $F2",
      "signature": "slt,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "slt $rd $rs $rt",
      "co": "000000",
      "cop": "101010",
      "help": "Set Rdest to 1 if Rsrc1 is less than Rsrc2, otherwise set 0 (for signed numbers).",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "slt",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "101010"
        }
      ],
      "definition": "rd = capi_uint2int(rs) < capi_uint2int(rt) ? 1 : 0;"
    },
    {
      "name": "slti",
      "type": "Logic",
      "signature_definition": "F0 $F2 $F1 F3",
      "signature": "slti,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "slti $rs $rt inm",
      "co": "001010",
      "cop": "",
      "help": "Set Rdest to 1 if Rsrc1 is less than inm, otherwise set 0 (for signed numbers).",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "slti",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "inm",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "rs = capi_uint2int(rt) < capi_uint2int(inm) ? 1 : 0;"
    },
    {
      "name": "sltiu",
      "type": "Logic",
      "signature_definition": "F0 $F2 $F1 F3",
      "signature": "sltiu,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "sltiu $rs $rt inm",
      "co": "001011",
      "cop": "",
      "help": "Set Rdest to 1 if Rsrc1 is less than inm, otherwise set 0 (for unsigned numbers).",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sltiu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "inm",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "rs = capi_int2uint(rt) < capi_int2uint(inm) ? 1 : 0;"
    },
    {
      "name": "sltu",
      "type": "Logic",
      "signature_definition": "F0 $F3 $F1 $F2",
      "signature": "sltu,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "sltu $rd $rs $rt",
      "co": "000000",
      "cop": "101011",
      "help": "Set Rdest to 1 if Rsrc1 is less than Rsrc2, otherwise set 0 (for unsigned numbers).",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sltu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "101011"
        }
      ],
      "definition": "rd = capi_uint2int(rs) < capi_uint2int(rt) ? 1 : 0;"
    },
    {
      "name": "sqrt.d",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "sqrt.d,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "sqrt.d $fd $fs",
      "co": "010001",
      "cop": "00001000100",
      "help": "Square root of fs (double)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sqrt.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000100"
        }
      ],
      "definition": "if (fs >= 0)\n { fd = Math.sqrt(fs); }\n else { capi_raise('Square root of a negative number is not allowed.'); }"
    },
    {
      "name": "sqrt.s",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F3 $F2",
      "signature": "sqrt.s,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "sqrt.s $fd $fs",
      "co": "010001",
      "cop": "00000000100",
      "help": "Square root of fs (float): fd=sqrt(fs)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sqrt.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000100"
        }
      ],
      "definition": "if (fs >= 0)\n { fd = Math.sqrt(fs); }\n else { capi_raise('Square root of a negative number is not allowed.'); }"
    },
    {
      "name": "sra",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F2 $F1 F3",
      "signature": "sra,$INT-Reg,$INT-Reg,inm-unsigned",
      "signatureRaw": "sra $rd $rt sa",
      "co": "000000",
      "cop": "000011",
      "help": "Arithmetic bit shift to the right",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sra",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "sa",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000011"
        }
      ],
      "definition": "rd = capi_int2uint(rt >> sa);"
    },
    {
      "name": "srl",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F3 $F2 F4",
      "signature": "srl,$INT-Reg,$INT-Reg,inm-unsigned",
      "signatureRaw": "srl $rd $rt sa",
      "co": "000000",
      "cop": "0000010",
      "help": "Logical bit shift to the right",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "srl",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "r",
          "type": "cop",
          "startbit": 21,
          "stopbit": 21,
          "valueField": "0"
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "sa",
          "type": "inm-unsigned",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000010"
        }
      ],
      "definition": "rd = rt >>> sa;"
    },
    {
      "name": "sub",
      "type": "Arithmetic integer",
      "co": "000000",
      "cop": "100010",
      "help": "Subtraction (with overflow)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 $F2 $F3",
      "signature": "sub,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "sub $reg1 $reg2 $reg3",
      "fields": [
        {
          "name": "sub",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "reg3",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100010"
        }
      ],
      "definition": "reg1 = capi_int2uint(capi_uint2int(reg2) - capi_uint2int(reg3));"
    },
    {
      "name": "sub.d",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F4 $F3 $F2",
      "signature": "sub.d,$DFP-Reg,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "sub.d $fd $fs $ft",
      "co": "010001",
      "cop": "00001000001",
      "help": "Subtraction (double)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sub.d",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00001"
        },
        {
          "name": "ft",
          "type": "DFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "DFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "DFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000001"
        }
      ],
      "definition": "fd = fs - ft;"
    },
    {
      "name": "sub.s",
      "type": "Arithmetic floating point",
      "signature_definition": "F0 $F4 $F3 $F2",
      "signature": "sub.s,$SFP-Reg,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "sub.s $fd $fs $ft",
      "co": "010001",
      "cop": "00000000001",
      "help": "Subtraction (float): fd = fs-ft",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "sub.s",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "fmt",
          "type": "cop",
          "startbit": 25,
          "stopbit": 21,
          "valueField": "00000"
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "fs",
          "type": "SFP-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "fd",
          "type": "SFP-Reg",
          "startbit": 10,
          "stopbit": 6
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "000001"
        }
      ],
      "definition": "fd = fs - ft;"
    },
    {
      "name": "subu",
      "type": "Arithmetic integer",
      "signature_definition": "F0 $F3 $F1 $F2",
      "signature": "subu,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "subu $rd $rs $rt",
      "co": "000000",
      "cop": "100011",
      "help": "Subtraction (without overflow)",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "subu",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "rs",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "rt",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "rd",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100011"
        }
      ],
      "definition": "rd = capi_int2uint(capi_int2uint(rs) - capi_int2uint(rt)) ;"
    },
    {
      "name": "sw",
      "type": "Memory access",
      "co": "101011",
      "cop": "",
      "help": "Store the Rsrc in the indicated address.",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 F2 ($F3)",
      "signature": "sw,$INT-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "sw $reg1 val ($reg2)",
      "fields": [
        {
          "name": "sw",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        }
      ],
      "definition": "capi_mem_write(val+reg2, reg1, 'w', reg1_name);"
    },
    {
      "name": "swc1",
      "type": "Memory access",
      "signature_definition": "F0 $F2 F3 ($F1)",
      "signature": "swc1,$SFP-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "swc1 $ft off ($base)",
      "co": "111001",
      "cop": "",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "fields": [
        {
          "name": "swc1",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "base",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "ft",
          "type": "SFP-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "off",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "capi_mem_write(base+off, capi_float322uint(ft), 'w', ft_name);"
    },
    {
      "name": "syscall",
      "type": "Syscall",
      "co": "000000",
      "cop": "001100",
      "help": "",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0",
      "signature": "syscall",
      "signatureRaw": "syscall",
      "fields": [
        {
          "name": "syscall",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "001100"
        }
      ],
      "definition": "switch(v0){\ncase 1:\ncapi_print_int('a0');\nbreak;\ncase 2:\ncapi_print_float('f12');\nbreak;\ncase 3:\ncapi_print_double('FP12');\nbreak;\ncase 4:\ncapi_print_string('a0');\nbreak;\ncase 5:\ncapi_read_int('v0');\nbreak;\ncase 6:\ncapi_read_float('f0');\nbreak;\ncase 7:\ncapi_read_double('FP0');\nbreak;\ncase 8:\ncapi_read_string('a0', 'a1');\nbreak;\ncase 9:\ncapi_sbrk('a0', 'v0');\nbreak;\ncase 10:\ncapi_exit();\nbreak;\ncase 11:\ncapi_print_char('a0');\nbreak;\ncase 12:\ncapi_read_char('v0');\nbreak;\ncase 13:\ncapi_get_clk_cycles('v0');\nbreak;\n}"
    },
    {
      "name": "xor",
      "type": "Logic",
      "co": "000000",
      "cop": "100110",
      "help": "XOR Logic Operation",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 $F2 $F3",
      "signature": "xor,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "xor $reg1 $reg2 $reg3",
      "fields": [
        {
          "name": "xor",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "reg3",
          "type": "INT-Reg",
          "startbit": 15,
          "stopbit": 11
        },
        {
          "name": "cop",
          "type": "cop",
          "startbit": 5,
          "stopbit": 0,
          "valueField": "100110"
        }
      ],
      "definition": "reg1 = reg2 ^ reg3;"
    },
    {
      "name": "xori",
      "type": "Logic",
      "co": "001110",
      "cop": null,
      "help": "XOR Logic Operation with immediate number",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0 $F1 $F2 F3",
      "signature": "xori,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "xori $reg1 $reg2 val",
      "fields": [
        {
          "name": "xori",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        },
        {
          "name": "reg1",
          "type": "INT-Reg",
          "startbit": 25,
          "stopbit": 21
        },
        {
          "name": "reg2",
          "type": "INT-Reg",
          "startbit": 20,
          "stopbit": 16
        },
        {
          "name": "val",
          "type": "inm-signed",
          "startbit": 15,
          "stopbit": 0
        }
      ],
      "definition": "reg1 = reg2 ^ val;"
    },
    {
      "name": "rfe",
      "type": "Other",
      "co": "110011",
      "cop": null,
      "help": "Return from exception",
      "properties": [],
      "nwords": 1,
      "clk_cycles": 1,
      "signature_definition": "F0",
      "signature": "rfe",
      "signatureRaw": "rfe",
      "fields": [
        {
          "name": "rfe",
          "type": "co",
          "startbit": 31,
          "stopbit": 26
        }
      ],
      "definition": "PC = EPC;"
    }
  ],
  "pseudoinstructions": [
    {
      "name": "add",
      "signature_definition": "add $F0 $F1 F2",
      "signature": "add,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "add $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.3.SIZE<=16){addi $rs $rt inm;}\nelse{lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nadd $rs $rt $at;} "
    },
    {
      "name": "addi",
      "help": "",
      "properties": [],
      "nwords": 1,
      "signature_definition": "addi $F0 $F1 F2",
      "signature": "addi,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "addi $reg1 $reg2 val",
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "val",
          "type": "inm-signed"
        }
      ],
      "definition": "lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nadd $reg1 $reg2 $at;"
    },
    {
      "name": "addiu",
      "help": "",
      "properties": [],
      "nwords": 1,
      "signature_definition": "addiu $F0 $F1 F2",
      "signature": "addiu,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "addiu $reg1 $reg2 val",
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "val",
          "type": "inm-signed"
        }
      ],
      "definition": "lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\naddu $reg1 $reg2 $at;"
    },
    {
      "name": "addu",
      "signature_definition": "addu $F0 $F1 F2",
      "signature": "addu,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "addu $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.3.SIZE<=16){addiu $rs $rt inm;}\nelse{lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\naddu $rs $rt $at;} "
    },
    {
      "name": "and",
      "signature_definition": "and $F0 $F1 F2",
      "signature": "and,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "and $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.3.SIZE<=16){andi $rs $rt inm;}\nelse{lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nand $rs $rt $at;} "
    },
    {
      "name": "andi",
      "signature_definition": "andi $F0 $F1 F2",
      "signature": "andi,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "andi $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nand $rs $rt $at;"
    },
    {
      "name": "b",
      "signature_definition": "b F0",
      "signature": "b,inm-unsigned",
      "signatureRaw": "b inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "inm",
          "type": "inm-unsigned"
        }
      ],
      "definition": "bgez $zero inm;"
    },
    {
      "name": "bc1t",
      "signature_definition": "bc1t F0",
      "signature": "bc1t, offset_words",
      "signatureRaw": "bc1t off",
      "help": "",
      "nwords": 1,
      "fields": [
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "bc1t 0 off;"
    },
    {
      "name": "beq",
      "signature_definition": "beq $F0 F1 F2",
      "signature": "beq,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "beq $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "ori $at $zero inm; beq $reg1 $at off;"
    },
    {
      "name": "beqz",
      "signature_definition": "beqz $F0 F1",
      "signature": "beqz,$INT-Reg,offset_words",
      "signatureRaw": "beqz $reg1 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "beq $reg1 $zero off;"
    },
    {
      "name": "bge",
      "signature_definition": "bge $F0 $F1 F2",
      "signature": "bge,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "bge $reg1 $reg2 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "slt $at $reg1 $reg2; beq $at $zero off;"
    },
    {
      "name": "bge",
      "signature_definition": "bge $F0 F1 F2",
      "signature": "bge,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "bge $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "slti $at $reg1 inm; beq $at $zero off;"
    },
    {
      "name": "bgeu",
      "signature_definition": "bgeu $F0 $F1 F2",
      "signature": "bgeu,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "bgeu $reg1 $reg2 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "sltu $at $reg1 $reg2; beq $at $zero off;"
    },
    {
      "name": "bgeu",
      "signature_definition": "bgeu $F0 F1 F2",
      "signature": "bgeu,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "bgeu $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "sltiu $at $reg1 inm; beq $at $zero off;"
    },
    {
      "name": "bgt",
      "signature_definition": "bgt $F0 $F1 F2",
      "signature": "bgt,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "bgt $reg1 $reg2 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "slt $at $reg2 $reg1; bne $at $zero off;"
    },
    {
      "name": "bgt",
      "signature_definition": "bgt $F0 F1 F2",
      "signature": "bgt,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "bgt $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "addi $at $zero inm; addi $at $at 1; slt $at $reg1 $at; beq $at $zero off;"
    },
    {
      "name": "bgtu",
      "signature_definition": "bgtu $F0 $F1 F2",
      "signature": "bgtu,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "bgtu $reg1 $reg2 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "sltu $at $reg2 $reg1; bne $at $zero off;"
    },
    {
      "name": "bgtu",
      "signature_definition": "bgtu $F0 F1 F2",
      "signature": "bgtu,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "bgtu $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "ori $at $zero inm; beq $at $reg1 off; sltu $at $reg1 $at;"
    },
    {
      "name": "ble",
      "signature_definition": "ble $F0 $F1 F2",
      "signature": "ble,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "ble $reg1 $reg2 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "slt $at $reg2 $reg1; beq $at $zero off;"
    },
    {
      "name": "ble",
      "signature_definition": "ble $F0 F1 F2",
      "signature": "ble,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "ble $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "addi $at $zero inm; addi $at $at 1; slti $at $reg1 inm; bne $at $zero off;"
    },
    {
      "name": "bleu",
      "signature_definition": "bleu $F0 $F1 F2",
      "signature": "bleu,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "bleu $reg1 $reg2 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "sltu $at $reg2 $reg1; beq $at $zero off;"
    },
    {
      "name": "bleu",
      "signature_definition": "bleu $F0 F1 F2",
      "signature": "bleu,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "bleu $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "ori $at $zero inm; beq $at $reg1 off; sltu $at $reg1 $at; bne $at $zero off;"
    },
    {
      "name": "blt",
      "signature_definition": "blt $F0 $F1 F2",
      "signature": "blt,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "blt $reg1 $reg2 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "slt $at $reg1 $reg2; bne $at $zero off;"
    },
    {
      "name": "blt",
      "signature_definition": "blt $F0 F1 F2",
      "signature": "blt,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "blt $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "slti $at $reg1 inm; bne $at $zero off;"
    },
    {
      "name": "bltu",
      "signature_definition": "bltu $F0 $F1 F2",
      "signature": "bltu,$INT-Reg,$INT-Reg,offset_words",
      "signatureRaw": "bltu $reg1 $reg2 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "sltu $at $reg1 $reg2; bne $at $zero off;"
    },
    {
      "name": "bltu",
      "signature_definition": "bltu $F0 F1 F2",
      "signature": "bltu,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "bltu $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "sltiu $at $reg1 off; bne $at $zero off;"
    },
    {
      "name": "bne",
      "signature_definition": "bne $F0 F1 F2",
      "signature": "bne,$INT-Reg,inm-unsigned,offset_words",
      "signatureRaw": "bne $reg1 inm off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-unsigned"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "ori $at $zero inm; bne $reg1 $at off;"
    },
    {
      "name": "bnez",
      "signature_definition": "bnez $F0 F1",
      "signature": "bnez,$INT-Reg,offset_words",
      "signatureRaw": "bnez $reg1 off",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "offset_words"
        }
      ],
      "definition": "bne $reg1 $zero off;"
    },
    {
      "name": "c.eq.d",
      "signature_definition": "c.eq.d $F1 $F0",
      "signature": "c.eq.d,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "c.eq.d $fs $ft",
      "help": "",
      "nwords": 1,
      "fields": [
        {
          "name": "ft",
          "type": "DFP-Reg"
        },
        {
          "name": "fs",
          "type": "DFP-Reg"
        }
      ],
      "definition": "c.eq.d 0 $fs $ft;"
    },
    {
      "name": "c.eq.s",
      "signature_definition": "c.eq.s $F1 $F0",
      "signature": "c.eq.s,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "c.eq.s $fs $ft",
      "help": "",
      "nwords": 1,
      "fields": [
        {
          "name": "ft",
          "type": "SFP-Reg"
        },
        {
          "name": "fs",
          "type": "SFP-Reg"
        }
      ],
      "definition": "c.eq.s 0 $fs $ft;"
    },
    {
      "name": "c.ole.d",
      "signature_definition": "c.ole.d $F1 $F0",
      "signature": "c.ole.d,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "c.ole.d $fs $ft",
      "help": "",
      "nwords": 1,
      "fields": [
        {
          "name": "ft",
          "type": "DFP-Reg"
        },
        {
          "name": "fs",
          "type": "DFP-Reg"
        }
      ],
      "definition": "c.ole.d 0 $fs $ft;"
    },
    {
      "name": "c.ole.s",
      "signature_definition": "c.ole.s $F1 $F0",
      "signature": "c.ole.s,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "c.ole.s $fs $ft",
      "help": "",
      "nwords": 1,
      "fields": [
        {
          "name": "ft",
          "type": "SFP-Reg"
        },
        {
          "name": "fs",
          "type": "SFP-Reg"
        }
      ],
      "definition": "c.ole.s 0 $fs $ft;"
    },
    {
      "name": "c.olt.d",
      "signature_definition": "c.olt.d $F1 $F0",
      "signature": "c.olt.d,$DFP-Reg,$DFP-Reg",
      "signatureRaw": "c.olt.d $fs $ft",
      "help": "",
      "nwords": 1,
      "fields": [
        {
          "name": "ft",
          "type": "DFP-Reg"
        },
        {
          "name": "fs",
          "type": "DFP-Reg"
        }
      ],
      "definition": "c.olt.d 0 $fs $ft;"
    },
    {
      "name": "c.olt.s",
      "signature_definition": "c.olt.s $F1 $F0",
      "signature": "c.olt.s,$SFP-Reg,$SFP-Reg",
      "signatureRaw": "c.olt.s $fs $ft",
      "help": "",
      "nwords": 1,
      "fields": [
        {
          "name": "ft",
          "type": "SFP-Reg"
        },
        {
          "name": "fs",
          "type": "SFP-Reg"
        }
      ],
      "definition": "c.olt.s 0 $fs $ft;"
    },
    {
      "name": "jalr",
      "signature_definition": "jalr $F0",
      "signature": "jalr,$INT-Reg",
      "signatureRaw": "jalr $rs",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        }
      ],
      "definition": "jalr $rs $ra;"
    },
    {
      "name": "l.d",
      "signature_definition": "l.d $F0 ($F1)",
      "signature": "l.d,$DFP-Reg,($INT-Reg)",
      "signatureRaw": "l.d $reg1 ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "DFP-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "ldc1 $reg1 0 ($reg2);"
    },
    {
      "name": "l.d",
      "signature_definition": "l.d $F0 F1 ($F2)",
      "signature": "l.d,$DFP-Reg,inm-signed,($INT-Reg)",
      "signatureRaw": "l.d $reg1 inm ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "DFP-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "ldc1 $reg1 inm ($reg2);"
    },
    {
      "name": "l.s",
      "signature_definition": "l.s $F0 ($F1)",
      "signature": "l.s,$SFP-Reg,$INT-Reg",
      "signatureRaw": "l.s $rs ($rt)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "SFP-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        }
      ],
      "definition": "lwc1 $rs 0 ($rt);"
    },
    {
      "name": "l.s",
      "signature_definition": "l.s $F0 F2 ($F1)",
      "signature": "l.s,$SFP-Reg,inm-signed,$INT-Reg",
      "signatureRaw": "l.s $rs off ($rt)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "SFP-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "inm-signed"
        }
      ],
      "definition": "lwc1 $rs off ($rt);"
    },
    {
      "name": "la",
      "signature_definition": "la $F0 F1",
      "signature": "la,$INT-Reg,inm-signed",
      "signatureRaw": "la $rd addr",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "addr",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){addi $rd $zero addr;}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nadd $rd $zero $at;}"
    },
    {
      "name": "lb",
      "signature_definition": "lb $F0 ($F1)",
      "signature": "lb,$INT-Reg,($INT-Reg)",
      "signatureRaw": "lb $reg1 ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "lb $reg1 0 ($reg2);"
    },
    {
      "name": "lb",
      "signature_definition": "lb $F0 F1",
      "signature": "lb,$INT-Reg,inm-signed",
      "signatureRaw": "lb $rd addr",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "addr",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){lb $rd addr ($zero);}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nlb $rd 0 ($at);}"
    },
    {
      "name": "lbu",
      "signature_definition": "lbu $F0 ($F1)",
      "signature": "lbu,$INT-Reg,($INT-Reg)",
      "signatureRaw": "lbu $reg1 ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "lbu $reg1 0 ($reg2);"
    },
    {
      "name": "lbu",
      "signature_definition": "lbu $F0 F1",
      "signature": "lbu,$INT-Reg,inm-signed",
      "signatureRaw": "lbu $rd addr",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "addr",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){lbu $rd addr ($zero);}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nlbu $rd 0 ($at);}"
    },
    {
      "name": "lh",
      "signature_definition": "lh $F0 ($F1)",
      "signature": "lh,$INT-Reg,($INT-Reg)",
      "signatureRaw": "lh $reg1 ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "lh $reg1 0 ($reg2);"
    },
    {
      "name": "lh",
      "signature_definition": "lh $F0 F1",
      "signature": "lh,$INT-Reg,inm-signed",
      "signatureRaw": "lh $rd addr",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "addr",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){lh $rd addr ($zero);}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nlh $rd 0 ($at);}"
    },
    {
      "name": "lhu",
      "signature_definition": "lhu $F0 ($F1)",
      "signature": "lhu,$INT-Reg,($INT-Reg)",
      "signatureRaw": "lhu $reg1 ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "lhu $reg1 0 ($reg2);"
    },
    {
      "name": "lhu",
      "signature_definition": "lhu $F0 F1",
      "signature": "lhu,$INT-Reg,inm-signed",
      "signatureRaw": "lhu $rd addr",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "addr",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){lhu $rd addr ($zero);}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nlhu $rd 0 ($at);}"
    },
    {
      "name": "li",
      "signature_definition": "li $F0 F1",
      "signature": "li,$INT-Reg,inm-signed",
      "signatureRaw": "li $rd val",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "val",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){addi $rd $zero val;}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nadd $rd $zero $at;}"
    },
    {
      "name": "li.d",
      "signature_definition": "li.d $F0 F1",
      "signature": "li.d,$DFP-Reg,inm-signed",
      "signatureRaw": "li.d $rd val",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "DFP-Reg"
        },
        {
          "name": "val",
          "type": "inm-signed"
        }
      ],
      "definition": "lui $at Field.2.(31,16).double;\nori $at $at Field.2.(15,0).double;\nmtc1 $at $aliasDouble(rd;1);\nlui $at Field.2.(63,48).double;\nori $at $at Field.2.(47,32).double;\nmtc1 $at $aliasDouble(rd;0);"
    },
    {
      "name": "li.s",
      "signature_definition": "li.s $F0 F1",
      "signature": "li.s,$SFP-Reg,inm-signed",
      "signatureRaw": "li.s $rd val",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "SFP-Reg"
        },
        {
          "name": "val",
          "type": "inm-signed"
        }
      ],
      "definition": "lui $at Field.2.(31,16).float;\nori $at $at Field.2.(15,0).float;\nmtc1 $at $rd;"
    },
    {
      "name": "lw",
      "signature_definition": "lw $F0 ($F1)",
      "signature": "lw,$INT-Reg,($INT-Reg)",
      "signatureRaw": "lw $reg1 ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "lw $reg1 0 ($reg2);"
    },
    {
      "name": "lw",
      "signature_definition": "lw $F0 F1",
      "signature": "lw,$INT-Reg,inm-signed",
      "signatureRaw": "lw $rd addr",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "addr",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){lw $rd addr ($zero);}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nlw $rd 0 ($at);}"
    },
    {
      "name": "move",
      "help": "",
      "properties": [],
      "nwords": 1,
      "signature_definition": "move $F0 $F1",
      "signature": "move,$INT-Reg,$INT-Reg",
      "signatureRaw": "move $reg1 $reg2",
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "add $reg1 $zero $reg2;"
    },
    {
      "name": "mul",
      "signature_definition": "mul $F0 $F1 F2",
      "signature": "mul,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "mul $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.3.SIZE<=16){addi $at $zero inm; mul $rs $rt $at;}\nelse{lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nmul $rs $rt $at;} "
    },
    {
      "name": "nor",
      "signature_definition": "nor $F0 $F1 F2",
      "signature": "nor,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "nor $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.3.SIZE<=16){addi $at $zero inm; nor $rs $rt $at;}\nelse{lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nnor $rs $rt $at;} "
    },
    {
      "name": "or",
      "signature_definition": "or $F0 $F1 F2",
      "signature": "or,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "or $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.3.SIZE<=16){ori $rs $rt inm;}\nelse{lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nor $rs $rt $at;} "
    },
    {
      "name": "ori",
      "signature_definition": "ori $F0 $F1 F2",
      "signature": "ori,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "ori $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nor $rs $rt $at;"
    },
    {
      "name": "rem",
      "signature_definition": "rem $F0 $F1 $F2",
      "signature": "rem,$INT-Reg,$INT-Reg,$INT-Reg",
      "signatureRaw": "rem $reg1 $reg2 $reg3",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "reg3",
          "type": "INT-Reg"
        }
      ],
      "definition": "div $reg2 $reg3; mfhi $reg1;"
    },
    {
      "name": "rol",
      "signature_definition": "rol $F1 $F0 F2",
      "signature": "rol,$INT-Reg,$INT-Reg,inm-unsigned",
      "signatureRaw": "rol $reg1 $reg2 val",
      "help": "",
      "nwords": 1,
      "fields": [
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "val",
          "type": "inm-unsigned"
        }
      ],
      "definition": "srl $at $reg2 op{32-(val)};sll $reg1 $reg2 val;or $reg1 $reg1 $at;"
    },
    {
      "name": "ror",
      "signature_definition": "ror $F1 $F0 F2",
      "signature": "ror,$INT-Reg,$INT-Reg,inm-unsigned",
      "signatureRaw": "ror $reg1 $reg2 val",
      "help": "",
      "nwords": 1,
      "fields": [
        {
          "name": "reg2",
          "type": "INT-Reg"
        },
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "val",
          "type": "inm-unsigned"
        }
      ],
      "definition": "sll $at $reg2 op{32-(val)};srl $reg1 $reg2 val;or $reg1 $reg1 $at;"
    },
    {
      "name": "s.d",
      "signature_definition": "s.d $F0 ($F1)",
      "signature": "s.d,$DFP-Reg,$INT-Reg",
      "signatureRaw": "s.d $rs ($rt)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "DFP-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        }
      ],
      "definition": "sdc1 $rs 0 ($rt);"
    },
    {
      "name": "s.d",
      "signature_definition": "s.d $F0 F2 ($F1)",
      "signature": "s.d,$DFP-Reg,inm-signed,$INT-Reg",
      "signatureRaw": "s.d $rs off ($rt)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "DFP-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "inm-signed"
        }
      ],
      "definition": "sdc1 $rs off ($rt);"
    },
    {
      "name": "s.s",
      "signature_definition": "s.s $F0 ($F1)",
      "signature": "s.s,$SFP-Reg,$INT-Reg",
      "signatureRaw": "s.s $rs ($rt)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "SFP-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        }
      ],
      "definition": "swc1 $rs 0 ($rt);"
    },
    {
      "name": "s.s",
      "signature_definition": "s.s $F0 F2 ($F1)",
      "signature": "s.s,$SFP-Reg,inm-signed,$INT-Reg",
      "signatureRaw": "s.s $rs off ($rt)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "SFP-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "off",
          "type": "inm-signed"
        }
      ],
      "definition": "swc1 $rs off ($rt);"
    },
    {
      "name": "sb",
      "signature_definition": "sb $F0 ($F1)",
      "signature": "sb,$INT-Reg,($INT-Reg)",
      "signatureRaw": "sb $reg1 ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "sb $reg1 0 ($reg2);"
    },
    {
      "name": "sb",
      "signature_definition": "sb $F0 F1",
      "signature": "sb,$INT-Reg,inm-signed",
      "signatureRaw": "sb $rd addr",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "addr",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){sb $rd addr ($zero);}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nsb $rd 0 ($at);}"
    },
    {
      "name": "sh",
      "signature_definition": "sh $F0 ($F1)",
      "signature": "sh,$INT-Reg,($INT-Reg)",
      "signatureRaw": "sh $reg1 ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "sh $reg1 0 ($reg2);"
    },
    {
      "name": "sh",
      "signature_definition": "sh $F0 F1",
      "signature": "sh,$INT-Reg,inm-signed",
      "signatureRaw": "sh $rd addr",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "addr",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){sh $rd addr ($zero);}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nsh $rd 0 ($at);}"
    },
    {
      "name": "sub",
      "signature_definition": "sub $F0 $F1 F2",
      "signature": "sub,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "sub $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.3.SIZE<=16){addi $at $zero inm; sub $rs $rt $at;}\nelse{lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nsub $rs $rt $at;} "
    },
    {
      "name": "subu",
      "signature_definition": "subu $F0 $F1 F2",
      "signature": "subu,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "subu $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.3.SIZE<=16){addi $at $zero inm; subu $rs $rt $at;}\nelse{lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nsubu $rs $rt $at;} "
    },
    {
      "name": "sw",
      "signature_definition": "sw $F0 ($F1)",
      "signature": "sw,$INT-Reg,($INT-Reg)",
      "signatureRaw": "sw $reg1 ($reg2)",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "reg1",
          "type": "INT-Reg"
        },
        {
          "name": "reg2",
          "type": "INT-Reg"
        }
      ],
      "definition": "sw $reg1 0 ($reg2);"
    },
    {
      "name": "sw",
      "signature_definition": "sw $F0 F1",
      "signature": "sw,$INT-Reg,inm-signed",
      "signatureRaw": "sw $rd addr",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rd",
          "type": "INT-Reg"
        },
        {
          "name": "addr",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.2.SIZE<=16){sw $rd addr ($zero);}\nelse{lui $at Field.2.(31,16).int;\nori $at $at Field.2.(15,0).int;\nsw $rd 0 ($at);}"
    },
    {
      "name": "xor",
      "signature_definition": "xor $F0 $F1 F2",
      "signature": "xor,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "xor $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "if(Field.3.SIZE<=16){xori $rs $rt inm;}\nelse{lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nxor $rs $rt $at;} "
    },
    {
      "name": "xori",
      "signature_definition": "xori $F0 $F1 F2",
      "signature": "xori,$INT-Reg,$INT-Reg,inm-signed",
      "signatureRaw": "xori $rs $rt inm",
      "help": "",
      "properties": [],
      "nwords": 1,
      "fields": [
        {
          "name": "rs",
          "type": "INT-Reg"
        },
        {
          "name": "rt",
          "type": "INT-Reg"
        },
        {
          "name": "inm",
          "type": "inm-signed"
        }
      ],
      "definition": "lui $at Field.3.(31,16).int;\nori $at $at Field.3.(15,0).int;\nxor $rs $rt $at;"
    }
  ],
  "directives": [
    {
      "name": ".data",
      "action": "data_segment",
      "size": null
    },
    {
      "name": ".text",
      "action": "code_segment",
      "size": null
    },
    {
      "name": ".globl",
      "action": "global_symbol",
      "size": null
    },
    {
      "name": ".byte",
      "action": "byte",
      "size": 1
    },
    {
      "name": ".half",
      "action": "half_word",
      "size": 2
    },
    {
      "name": ".word",
      "action": "word",
      "size": 4
    },
    {
      "name": ".doubleword",
      "action": "double_word",
      "size": 8
    },
    {
      "name": ".float",
      "action": "float",
      "size": 4
    },
    {
      "name": ".double",
      "action": "double",
      "size": 8
    },
    {
      "name": ".space",
      "action": "space",
      "size": 1
    },
    {
      "name": ".ascii",
      "action": "ascii_not_null_end",
      "size": null
    },
    {
      "name": ".asciiz",
      "action": "ascii_null_end",
      "size": null
    },
    {
      "name": ".align",
      "action": "align",
      "size": null
    }
  ],
  "memory_layout": [
    {
      "name": "ktext start",
      "value": "0x00000000"
    },
    {
      "name": "ktext end",
      "value": "0x00000000"
    },
    {
      "name": "kdata start",
      "value": "0x00000000"
    },
    {
      "name": "kdata end",
      "value": "0x00000000"
    },
    {
      "name": "text start",
      "value": "0x00000000"
    },
    {
      "name": "text end",
      "value": "0x001FFFFF"
    },
    {
      "name": "data start",
      "value": "0x00200000"
    },
    {
      "name": "data end",
      "value": "0x05BBFCBF"
    },
    {
      "name": "stack start",
      "value": "0x0FFFFFFC"
    },
    {
      "name": "stack end",
      "value": "0x0FFFFFFF"
    }
  ]
}
